package com.calendar.tbt;

import android.app.job.JobParameters;
import android.app.job.JobService;
import android.content.Context;
import android.util.Log;

public class WidgetUpdateJobService extends JobService {
    private static final String TAG = "WidgetUpdateJobService";
    private static final int JOB_ID = 1001;
    private static final long UPDATE_INTERVAL = 60000; // 60 seconds
    private static final long currentTime = 0; // 60 seconds

    @Override
    public boolean onStartJob(JobParameters params) {
        long currentTime = System.currentTimeMillis();
        String currentTimeStr = new java.text.SimpleDateFormat("HH:mm:ss.SSS").format(new java.util.Date(currentTime));
        
        Log.d(TAG, "Job started - updating widgets at " + currentTimeStr);
        
        // Check if we're close to a minute boundary (within 30 seconds)
        long secondsFromMinuteBoundary = (currentTime / 1000) % 60;
        Log.d(TAG, "Seconds from minute boundary: " + secondsFromMinuteBoundary);
        
        if (secondsFromMinuteBoundary <= 30 || secondsFromMinuteBoundary >= 30) {
            Log.d(TAG, "Running at minute boundary (seconds: " + secondsFromMinuteBoundary + ") - updating widget");
            // Update widgets if we're at a minute boundary
            CalendarWidget.updateAllWidgets(this);
        } else {
            Log.w(TAG, "Running off minute boundary (seconds: " + secondsFromMinuteBoundary + ") - but updating anyway");
            // Update widgets even if off boundary to ensure updates happen
            CalendarWidget.updateAllWidgets(this);
        }
        
        // Always schedule next update for the next minute boundary
        Log.d(TAG, "Scheduling next update for the next minute boundary");
        scheduleNextUpdate(this);
        
        // Job completed
        jobFinished(params, false);
        return true;
    }

    @Override
    public boolean onStopJob(JobParameters params) {
        Log.d(TAG, "Job stopped");
        return false;
    }

    public static void scheduleWidgetJob(Context context) {
        android.app.job.JobScheduler jobScheduler = 
            (android.app.job.JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);
        
        if (jobScheduler != null) {
            android.app.job.JobInfo.Builder builder = new android.app.job.JobInfo.Builder(JOB_ID, 
                new android.content.ComponentName(context, WidgetUpdateJobService.class));
            
            // Calculate time to next minute boundary (e.g., 15:20:00, 15:21:00)
            long currentTime = System.currentTimeMillis();
            long nextMinuteBoundary = ((currentTime / 60000) + 1) * 60000; // Next minute at :00 seconds
            long delayMillis = nextMinuteBoundary - currentTime;
            
            Log.d(TAG, "Current time: " + new java.text.SimpleDateFormat("HH:mm:ss.SSS").format(new java.util.Date(currentTime)) + 
                  ", Next minute boundary: " + new java.text.SimpleDateFormat("HH:mm:ss.SSS").format(new java.util.Date(nextMinuteBoundary)) + 
                  ", Delay: " + delayMillis + "ms");
            
            // Use one-time job that will reschedule itself at exact minute boundaries
            builder.setMinimumLatency(delayMillis);
            builder.setOverrideDeadline(delayMillis + 1000); // Only 1 second tolerance for precision
            
            builder.setRequiredNetworkType(android.app.job.JobInfo.NETWORK_TYPE_NONE);
            builder.setRequiresCharging(false);
            builder.setRequiresDeviceIdle(false);
            
            int result = jobScheduler.schedule(builder.build());
            if (result == android.app.job.JobScheduler.RESULT_SUCCESS) {
                Log.d(TAG, "Widget update job scheduled successfully for next minute boundary at " + 
                      new java.text.SimpleDateFormat("HH:mm:ss").format(new java.util.Date(nextMinuteBoundary)));
            } else {
                Log.e(TAG, "Failed to schedule widget update job");
            }
        }
    }

    public static void cancelWidgetJob(Context context) {
        android.app.job.JobScheduler jobScheduler = 
            (android.app.job.JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);
        
        if (jobScheduler != null) {
            jobScheduler.cancel(JOB_ID);
            Log.d(TAG, "Widget update job cancelled");
        }
    }

    private static void scheduleNextUpdate(Context context) {
        // Schedule the next job for the next minute
        Log.d(TAG, "Scheduling next update for the next minute");
        scheduleWidgetJob(context);
    }
}